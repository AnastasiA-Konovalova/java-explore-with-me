{
	"info": {
		"_postman_id": "0c8aca30-5e02-4666-8ab5-33733f002616",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39512514"
	},
	"item": [
		{
			"name": "Comment",
			"item": [
				{
					"name": "Получение комментария по идентификатору пользователю",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"        pm.variables.set(\"response\", comment);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/users/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const source = pm.variables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"        pm.variables.set(\"response\", comment);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${comment.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const source = pm.variables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по идентификатору события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"        pm.variables.set(\"response\", comment);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const source = pm.variables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев с возможностью фильтрации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.request.removeQueryParams(['users', 'events']);\r",
									"        pm.request.addQueryParams([`users=` + user.id, 'events=' + event.id]);\r",
									"        pm.variables.set('response', comment);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.variables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?users=0&events=0&rangeStart=2022-06-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": "0"
								},
								{
									"key": "events",
									"value": "0"
								},
								{
									"key": "rangeStart",
									"value": "2022-06-06%2013%3A30%3A38"
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06%2013%3A30%3A38"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						},
						"description": "Обратите внимание:\n\n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n    \n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n    \n- если в запросе не указан диапазон дат \\[rangeStart-rangeEnd\\], то нужно выгружать события, которые произойдут позже текущей даты и времени\n    \n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n    \n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Получение комментариев с возможностью фильтрации без параметров",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.variables.set('response', comment);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.variables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/admin/comments",
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        console.log(\"Комментарий создан:\", comment);\r",
									"        const commentsBeforeDelete = await api.findComment(event.id);\r",
									"\r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"        pm.variables.set(\"commentsBeforeDelete\", JSON.stringify(commentsBeforeDelete));\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${comment.id}/users/${user.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа должен быть 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"const beforeDelete = JSON.parse(pm.variables.get(\"commentsBeforeDelete\"));\r",
									"const deletedCommentId = parseInt(pm.variables.get(\"commentId\"));\r",
									"\r",
									"pm.test(\"Комментарий должен существовать до удаления\", function () {\r",
									"    pm.expect(beforeDelete.length).to.eql(1);\r",
									"    pm.expect(beforeDelete[0].id).to.eql(deletedCommentId);\r",
									"});\r",
									"\r",
									"setTimeout(() => {\r",
									"    const request = {\r",
									"        url: `http://localhost:8080/comments/${deletedCommentId}`,\r",
									"        method: \"GET\",\r",
									"        header: { \"Content-Type\": \"application/json\" }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(request, (err, res) => {\r",
									"        pm.test(\"Комментарий должен быть удалён (ожидается статус 404)\", function () {\r",
									"            pm.expect(res.code).to.eql(404);\r",
									"        });\r",
									"    });\r",
									"}, 300);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/users/:userId ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"users",
								":userId "
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId ",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Сохранение нового комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        var newUser =  rnd.getUser()\r",
									"        console.log(newUser)\r",
									"        const user = await api.addUser(newUser);\r",
									"        console.log(user)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        eventBody['requestModeration'] = false;\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const submittedUser = await api.addUser(rnd.getUser());\r",
									"        const comment = rnd.getComment();\r",
									"\r",
									"        pm.collectionVariables.set(\"userId\", submittedUser.id);\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"        pm.collectionVariables.set(\"request_body\", JSON.stringify(comment));\r",
									"\r",
									"        const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${submittedUser.id}/events/${event.id}`;\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => {\r",
									"    try {\r",
									"        await main();\r",
									"    } catch (e) {\r",
									"        console.error(e);\r",
									"    } finally {\r",
									"        clearInterval(interval);\r",
									"    }\r",
									"}, 100);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"console.log(\"Ответ сервера:\", JSON.stringify(target, null, 2));\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        \r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${comment.id}/users/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                text: \"Update text\"\r",
									"            }),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, commentator, status, event, commentTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('commentator');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('commentTime');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.event).to.not.be.null;\r",
									"    pm.expect(target.commentator).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.commentTime).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Попытка создать комментарий, который предварительно не опубликован",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        comment = rnd.getComment();\r",
									"\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка создать комментарий к несуществующему событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        comment = rnd.getComment();\r",
									"\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"\r",
									"        const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/users/${user.id}/events/` + 0 + `/comments`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка создать пустой комментарий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = rnd.getComment();\r",
									"        comment[\"text\"] = '';\r",
									"\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка создать комментарий с полем text > 7000 знаков",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = rnd.getComment();\r",
									"        comment = {'text': rnd.getWord(7001)};\r",
									"\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": ""
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка обновления комментария, если поле text пустое",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${comment.id}/users/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                text: \"\"\r",
									"            }),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка обновления комментария с полем text > 7000",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
									"\r",
									"        pm.variables.set(\"userId\", user.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${comment.id}/users/${user.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                text: rnd.getWord(7001)\r",
									"            }),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка обновления комментария другого пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        comment = await api.addComment(user1.id, event.id, rnd.getComment());\r",
									"\r",
									"        pm.variables.set(\"userId\", user1.id);\r",
									"        pm.variables.set(\"eventId\", event.id);\r",
									"        pm.variables.set(\"commentId\", comment.id);\r",
									"\r",
									"        const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"        pm.request.url = `${baseUrl}/comments/${comment.id}/users/${user2.id}/events/${event.id}`;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                text: \"New text\"\r",
									"            }),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose = null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(userId, eventId, comment, verbose = null) {\r",
					"        console.log(comment);\r",
					"        return this.post(\"/comments/\" + userId + \"/events/\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose = null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose = null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose = null) {\r",
					"        return this.patch('/admin/events/' + eventId, { stateAction: \"PUBLISH_EVENT\" }, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"\r",
					"    async rejectEvent(eventId, verbose = null) {\r",
					"        return this.patch('/admin/events/' + eventId, { stateAction: \"REJECT_EVENT\" }, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async findComment(eventId, verbose = null) {\r",
					"        return this.get('/comments/events/' + eventId, null, \"Ошибка при поиске комментария по eventId\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose = null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose = null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose = null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body = null, errorText = \"Ошибка при выполнении запроса: \", verbose = null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if (verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if (error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                            \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" +\r",
					"                            \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if (verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0) {\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    } else {\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"\r",
					"            } catch (err) {\r",
					"                if (verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() { }\r",
					"\r",
					"    getComment() {\r",
					"        const statuses = ['POSITIVE', 'NEUTRAL', 'NEGATIVE'];\r",
					"        return {\r",
					"            text: 'TestComment1',\r",
					"            status: statuses[Math.floor(Math.random() * statuses.length)]\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift = 0, yearShift = 0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "request_body",
			"value": ""
		}
	]
}